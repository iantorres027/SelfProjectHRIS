// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Template.Domain.Entities;
using Template.Infrastructure;

namespace Template.Infrastructure.Persistence;

public partial class MNLTemplateDBContext : DbContext
{
    public MNLTemplateDBContext(DbContextOptions<MNLTemplateDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AuditTrail> AuditTrails { get; set; }

    public virtual DbSet<Company> Companies { get; set; }

    public virtual DbSet<CompanyLogo> CompanyLogos { get; set; }

    public virtual DbSet<CompanySetting> CompanySettings { get; set; }

    public virtual DbSet<Country> Countries { get; set; }

    public virtual DbSet<Currency> Currencies { get; set; }

    public virtual DbSet<CurrencyRate> CurrencyRates { get; set; }

    public virtual DbSet<Document> Documents { get; set; }

    public virtual DbSet<DocumentType> DocumentTypes { get; set; }

    public virtual DbSet<EwtType> EwtTypes { get; set; }

    public virtual DbSet<Module> Modules { get; set; }

    public virtual DbSet<ModuleSetting> ModuleSettings { get; set; }

    public virtual DbSet<ModuleStage> ModuleStages { get; set; }

    public virtual DbSet<ModuleStageApprover> ModuleStageApprovers { get; set; }

    public virtual DbSet<ModuleType> ModuleTypes { get; set; }

    public virtual DbSet<PurchaseOrder> PurchaseOrders { get; set; }

    public virtual DbSet<PurchaseOrderDetail> PurchaseOrderDetails { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<RoleAccess> RoleAccesses { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserActivity> UserActivities { get; set; }

    public virtual DbSet<UserApprover> UserApprovers { get; set; }

    public virtual DbSet<UserRole> UserRoles { get; set; }

    public virtual DbSet<UserToken> UserTokens { get; set; }

    public virtual DbSet<VatType> VatTypes { get; set; }

    public virtual DbSet<Vendor> Vendors { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.HasAnnotation("Scaffolding:ConnectionString", "Data Source=(local);Initial Catalog=Template.Database;Integrated Security=true");

        modelBuilder.Entity<AuditTrail>(entity =>
        {
            entity.ToTable("AuditTrail");

            entity.Property(e => e.Action)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.ChangeDate).HasDefaultValueSql("getdate()");
            entity.Property(e => e.ColumnName)
                .IsRequired()
                .HasMaxLength(4000);
            entity.Property(e => e.NewValue)
                .IsRequired()
                .HasMaxLength(4000);
            entity.Property(e => e.OldValue)
                .IsRequired()
                .HasMaxLength(4000);
            entity.Property(e => e.RecordPk)
                .IsRequired()
                .HasMaxLength(4000);
            entity.Property(e => e.TableName)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<Company>(entity =>
        {
            entity.ToTable("Company", tb => tb.HasTrigger("trigger"));

            entity.Property(e => e.BusinessStyle)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.DateCreated).HasDefaultValueSql("getdate()");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FaxNo)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.MobileNo)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RepresentativeDesignation)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.RepresentativeName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.RepresentativeTin)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.TelNo)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Tin)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Website)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<CompanyLogo>(entity =>
        {
            entity.ToTable("CompanyLogo");

            entity.Property(e => e.DateCreated).HasDefaultValueSql("getdate()");
            entity.Property(e => e.DateModified).HasDefaultValueSql("getdate()");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Location)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.Company).WithMany(p => p.CompanyLogos)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CompanyLogo_ToCompanyId");
        });

        modelBuilder.Entity<CompanySetting>(entity =>
        {
            entity.ToTable("CompanySetting");

            entity.Property(e => e.AccountingPeriod).HasMaxLength(25);
            entity.Property(e => e.AcctgPeriodFrom).HasMaxLength(50);
            entity.Property(e => e.AcctgPeriodTo).HasMaxLength(50);

            entity.HasOne(d => d.Company).WithMany(p => p.CompanySettings)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CompanySetting_ToCompanyId");
        });

        modelBuilder.Entity<Country>(entity =>
        {
            entity.ToTable("Country");

            entity.Property(e => e.Capital).HasMaxLength(50);
            entity.Property(e => e.Continent).HasMaxLength(50);
            entity.Property(e => e.ContinentName).HasMaxLength(100);
            entity.Property(e => e.CountryCode)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("ISO Code");
            entity.Property(e => e.CountryName)
                .IsRequired()
                .HasMaxLength(100)
                .HasComment("ISO3 Code");
            entity.Property(e => e.CurrencyCode).HasMaxLength(50);
            entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");
            entity.Property(e => e.East).HasMaxLength(50);
            entity.Property(e => e.FipsCode).HasMaxLength(50);
            entity.Property(e => e.IsoAlpha3).HasMaxLength(50);
            entity.Property(e => e.IsoNumeric).HasMaxLength(50);
            entity.Property(e => e.Languages).HasMaxLength(100);
            entity.Property(e => e.North).HasMaxLength(50);
            entity.Property(e => e.South).HasMaxLength(50);
            entity.Property(e => e.West).HasMaxLength(50);
        });

        modelBuilder.Entity<Currency>(entity =>
        {
            entity.ToTable("Currency");

            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Rate).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.Symbol)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<CurrencyRate>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CurrencyRate");

            entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");
            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.Rate).HasColumnType("decimal(18, 5)");
        });

        modelBuilder.Entity<Document>(entity =>
        {
            entity.ToTable("Document");

            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");
            entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");
            entity.Property(e => e.FileType)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Guid).HasDefaultValueSql("newid()");
            entity.Property(e => e.Location)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.ReferenceNo)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<DocumentType>(entity =>
        {
            entity.ToTable("DocumentType");

            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");
            entity.Property(e => e.DateModified).HasDefaultValueSql("getutcdate()");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(10);
        });

        modelBuilder.Entity<EwtType>(entity =>
        {
            entity.ToTable("EwtType");

            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(4000);
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.Rate).HasColumnType("decimal(18, 5)");
        });

        modelBuilder.Entity<Module>(entity =>
        {
            entity.ToTable("Module", tb => tb.HasTrigger("trigger"));

            entity.Property(e => e.Action).HasMaxLength(50);
            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Controller)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.DateCreated).HasDefaultValueSql("getdate()");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Icon).HasMaxLength(100);
            entity.Property(e => e.IsVisible)
                .IsRequired()
                .HasDefaultValueSql("1");

            entity.HasOne(d => d.ModuleType).WithMany(p => p.Modules)
                .HasForeignKey(d => d.ModuleTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Module_ModuleType");
        });

        modelBuilder.Entity<ModuleSetting>(entity =>
        {
            entity.ToTable("ModuleSetting");

            entity.Property(e => e.DateCreated).HasDefaultValueSql("getdate()");
            entity.Property(e => e.DateType)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.DefaultValue)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Selection).IsRequired();
            entity.Property(e => e.Value)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<ModuleStage>(entity =>
        {
            entity.ToTable("ModuleStage", tb => tb.HasTrigger("trigger"));

            entity.Property(e => e.ApproveDesc)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.DateCreated).HasDefaultValueSql("getdate()");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RejectDesc)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<ModuleStageApprover>(entity =>
        {
            entity.ToTable("ModuleStageApprover");

            entity.Property(e => e.DateCreated).HasDefaultValueSql("getdate()");
        });

        modelBuilder.Entity<ModuleType>(entity =>
        {
            entity.ToTable("ModuleType", tb => tb.HasTrigger("trigger"));

            entity.Property(e => e.Action).HasMaxLength(50);
            entity.Property(e => e.Controller).HasMaxLength(50);
            entity.Property(e => e.DateCreated).HasDefaultValueSql("getdate()");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Icon).HasMaxLength(50);
            entity.Property(e => e.IsVisible)
                .IsRequired()
                .HasDefaultValueSql("1");
        });

        modelBuilder.Entity<PurchaseOrder>(entity =>
        {
            entity.ToTable("PurchaseOrder");

            entity.Property(e => e.CurrencyAmount).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");
            entity.Property(e => e.EwtAmount).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.GrossAmount).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.NetAmount).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.NonVatableAmount).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.ReferenceNo)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.Remarks)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.TransactionDate).HasColumnType("date");
            entity.Property(e => e.TransactionNo)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.VatAmount).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.VatableAmount).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.VendorCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PurchaseOrderDetail>(entity =>
        {
            entity.ToTable("PurchaseOrderDetail");

            entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");
            entity.Property(e => e.DiscountAmount).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.DiscountPercent).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.EwtAmount).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.ItemCost).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.NonVatableAmount).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.Qty).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.Remarks).HasMaxLength(500);
            entity.Property(e => e.VatTypeId).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.VatableAmount).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.VendorCode)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.ToTable("Role");

            entity.Property(e => e.DateCreated).HasDefaultValueSql("getdate()");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<RoleAccess>(entity =>
        {
            entity.ToTable("RoleAccess", tb => tb.HasTrigger("trigger"));

            entity.Property(e => e.DateCreated).HasDefaultValueSql("getdate()");
            entity.Property(e => e.DateModified).HasDefaultValueSql("getdate()");

            entity.HasOne(d => d.Module).WithMany(p => p.RoleAccesses)
                .HasForeignKey(d => d.ModuleId)
                .HasConstraintName("FK_RoleAccess_Module");

            entity.HasOne(d => d.Role).WithMany(p => p.RoleAccesses)
                .HasForeignKey(d => d.RoleId)
                .HasConstraintName("FK_RoleAccess_Role");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.ToTable("User");

            entity.Property(e => e.DateCreated).HasDefaultValueSql("getdate()");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Gender).HasMaxLength(10);
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.MiddleName).HasMaxLength(50);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.PasswordSalt)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Position)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Prefix).HasMaxLength(50);
            entity.Property(e => e.ProfilePicture).HasMaxLength(255);
            entity.Property(e => e.RefreshToken).HasMaxLength(255);
            entity.Property(e => e.Signature).HasMaxLength(255);
            entity.Property(e => e.Suffix).HasMaxLength(50);
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<UserActivity>(entity =>
        {
            entity.ToTable("UserActivity");

            entity.Property(e => e.Action)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Browser)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Device)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.User).WithMany(p => p.UserActivities)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserActivity_User");
        });

        modelBuilder.Entity<UserApprover>(entity =>
        {
            entity.ToTable("UserApprover");

            entity.Property(e => e.DateCreated).HasDefaultValueSql("getdate()");
        });

        modelBuilder.Entity<UserRole>(entity =>
        {
            entity.ToTable("UserRole");

            entity.HasOne(d => d.Role).WithMany(p => p.UserRoles)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserRole_ToRole");

            entity.HasOne(d => d.User).WithMany(p => p.UserRoles)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserRole_ToUser");
        });

        modelBuilder.Entity<UserToken>(entity =>
        {
            entity.ToTable("UserToken");

            entity.Property(e => e.CreatedDate).HasDefaultValueSql("getdate()");
            entity.Property(e => e.RefreshToken)
                .IsRequired()
                .HasMaxLength(1000);
            entity.Property(e => e.Token)
                .IsRequired()
                .HasMaxLength(4000);
        });

        modelBuilder.Entity<VatType>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("VatType");

            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");
            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Rate).HasColumnType("decimal(18, 5)");
        });

        modelBuilder.Entity<Vendor>(entity =>
        {
            entity.ToTable("Vendor");

            entity.Property(e => e.DateCreated).HasDefaultValueSql("getutcdate()");
            entity.Property(e => e.EmailAddress).HasMaxLength(100);
            entity.Property(e => e.FaxNo).HasMaxLength(100);
            entity.Property(e => e.MobileNo).HasMaxLength(100);
            entity.Property(e => e.ProfilePicture).HasMaxLength(4000);
            entity.Property(e => e.TelNo).HasMaxLength(100);
            entity.Property(e => e.TinNo).HasMaxLength(50);
            entity.Property(e => e.VendorCode)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.VendorName)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.Website).HasMaxLength(150);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}